'2'="Other Hispanic",
'3'="Non-Hispanic White",
'4'="Non-Hispanic Black",
'5'="Other Race"))
# Ensure categorical variables are factors
data_clean <- data_clean %>%
mutate(RIAGENDR = as.factor(RIAGENDR),
RIDRETH1 = as.factor(RIDRETH1))
library(pscl)
# Remove NA missing values and map race and gender
data_clean <- merged_data %>%
select(RIDAGEYR, RIDRETH1, RIAGENDR, INDFMPIR, VIQ220) %>%
filter(!is.na(RIDAGEYR) & !is.na(RIDRETH1) & !is.na(RIAGENDR) & !is.na(INDFMPIR) & !is.na(VIQ220)) %>%
mutate(RIAGENDR = recode(RIAGENDR, '1'="Male", '2'="Female"),
RIDRETH1 = recode(RIDRETH1, '1'="Mexican American",
'2'="Other Hispanic",
'3'="Non-Hispanic White",
'4'="Non-Hispanic Black",
'5'="Other Race"))
# Ensure categorical variables are factors
data_clean <- data_clean %>%
mutate(RIAGENDR = as.factor(RIAGENDR),
RIDRETH1 = as.factor(RIDRETH1))
# Remove NA missing values and map race and gender
data_clean <- merged_data %>%
select(RIDAGEYR, RIDRETH1, RIAGENDR, INDFMPIR, VIQ220) %>%
filter(!is.na(RIDAGEYR) & !is.na(RIDRETH1) & !is.na(RIAGENDR) & !is.na(INDFMPIR) & !is.na(VIQ220)) %>%
mutate(RIAGENDR = recode(RIAGENDR, '1'="Male", '2'="Female"),
RIDRETH1 = recode(RIDRETH1, '1'="Mexican American",
'2'="Other Hispanic",
'3'="Non-Hispanic White",
'4'="Non-Hispanic Black",
'5'="Other Race"))
# Ensure categorical variables are factors
data_clean <- data_clean %>%
mutate(RIAGENDR = as.factor(RIAGENDR),
RIDRETH1 = as.factor(RIDRETH1))
library(pscl)
# Fit Model 1 (age)
model_1 <- glm(VIQ220 ~ RIDAGEYR, data = data_clean, family = binomial)
library(pscl)
# Fit Model 1 (age)
model_1 <- glm(VIQ220 ~ RIDAGEYR, data = data_clean, family = binomial)
data_clean$VIQ220.values()
unique(data_clean$VIQ220)
unique(data_clean$VIQ220)
# Remove NA missing values and map race and gender
data_clean <- merged_data %>%
select(RIDAGEYR, RIDRETH1, RIAGENDR, INDFMPIR, VIQ220) %>%
filter(!is.na(RIDAGEYR) & !is.na(RIDRETH1) & !is.na(RIAGENDR) & !is.na(INDFMPIR) & !is.na(VIQ220)) %>%
mutate(RIAGENDR = recode(RIAGENDR, '1'="Male", '2'="Female"),
RIDRETH1 = recode(RIDRETH1, '1'="Mexican American",
'2'="Other Hispanic",
'3'="Non-Hispanic White",
'4'="Non-Hispanic Black",
'5'="Other Race"),
VIQ220 = recode(VIQ220, '1'='1', '2'='0','9'='0'))
# Ensure categorical variables are factors
data_clean <- data_clean %>%
mutate(RIAGENDR = as.factor(RIAGENDR),
RIDRETH1 = as.factor(RIDRETH1))
unique(data_clean$VIQ220)
# Remove NA missing values and map race and gender
data_clean <- merged_data %>%
select(RIDAGEYR, RIDRETH1, RIAGENDR, INDFMPIR, VIQ220) %>%
filter(!is.na(RIDAGEYR) & !is.na(RIDRETH1) & !is.na(RIAGENDR) & !is.na(INDFMPIR) & !is.na(VIQ220)) %>%
mutate(RIAGENDR = recode(RIAGENDR, '1'="Male", '2'="Female"),
RIDRETH1 = recode(RIDRETH1, '1'="Mexican American",
'2'="Other Hispanic",
'3'="Non-Hispanic White",
'4'="Non-Hispanic Black",
'5'="Other Race"),
VIQ220 = recode(VIQ220, '1'=1, '2'=0,'9'=0))
# Ensure categorical variables are factors
data_clean <- data_clean %>%
mutate(RIAGENDR = as.factor(RIAGENDR),
RIDRETH1 = as.factor(RIDRETH1))
unique(data_clean$VIQ220)
library(pscl)
# Fit Model 1 (age)
model_1 <- glm(VIQ220 ~ RIDAGEYR, data = data_clean, family = binomial)
# Fit Model 2 (age, race, gender)
model_2 <- glm(VIQ220 ~ RIDAGEYR + RIDRETH1 + RIDAGENDR, data = data_clean, family = binomial)
library(pscl)
# Fit Model 1 (age)
model_1 <- glm(VIQ220 ~ RIDAGEYR, data = data_clean, family = binomial)
# Fit Model 2 (age, race, gender)
model_2 <- glm(VIQ220 ~ RIDAGEYR + RIDRETH1 + RIAGENDR, data = data_clean, family = binomial)
# Fit Model 3 (age, race, gender, Poverty Income ratio)
model_3 <- glm(VIQ220 ~ RIDAGEYR + RIDRETH1 + RIAGENDR + INDFMPIR, data = data_clean, family = binomial)
# Function to calculate odds ratios and related statistics
extract_model_info <- function(model) {
# Get odds ratios and confidence intervals
model_summary <- broom::tidy(model, exponentiate = TRUE, conf.int = TRUE)
# Get sample size, AIC, and pseudo-R²
sample_size <- nobs(model)
aic_value <- AIC(model)
pseudo_r2 <- pscl::pR2(model)["McFadden"]
# Add sample size, pseudo-R², and AIC to the output
model_summary <- model_summary %>%
mutate(Sample_Size = sample_size,
Pseudo_R2 = pseudo_r2,
AIC = aic_value)
return(model_summary)
}
# Extract info for each model
model_1_info <- extract_model_info(model_1)
model_2_info <- extract_model_info(model_2)
model_3_info <- extract_model_info(model_3)
# Combine the results into a single table
results_table <- list(
"Model 1 (Age)" = model_1_info,
"Model 2 (Age, Race, Gender)" = model_2_info,
"Model 3 (Age, Race, Gender, Poverty Ratio)" = model_3_info
)
# Display the results using kable
kable(bind_rows(results_table, .id = "Model"),
caption = "Logistic Regression Results: Odds Ratios, Sample Size, Pseudo-R², and AIC",
digits = 2)
library(broom)
library(lmtest)
library(broom)
library(lmtest)
library(broom)
library(lmtest)
waldtest_gender <- coeftest(model_3)
# Extract the relevant result for gender (assuming "GENDERMale" is the term for male)
waldtest_gender_results <- waldtest_gender[grepl("GENDER", rownames(waldtest_gender)), ]
# Display the Wald test results
kable(waldtest_gender_results,
caption = "Wald Test Results for Gender Coefficient in Model 3",
digits = 3)
library(broom)
library(lmtest)
waldtest_gender <- coeftest(model_3)
# Extract the relevant result for gender (assuming "GENDERMale" is the term for male)
waldtest_gender_results <- waldtest_gender[grepl("GENDER", rownames(waldtest_gender)), ]
# Display the Wald test results
kable(waldtest_gender_results,
caption = "Wald Test Results for Gender Coefficient in Model 3",
digits = 3)
kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients[RIAGENDRMale]
summary(model_3)$coefficients
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients["RIAGENDRMale"]
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients["RIAGENDRMale"]
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients[1]
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients["RIAGENDRMale"]
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
summary(model_3)$coefficients["RIAGENDRMale",]
#kable(summary(model_3)$coefficients["as.factor(RIAGENDR)2",],digits=3)
kable(summary(model_3)$coefficients["RIAGENDRMale",] ,digits = 2)
install.packages("DBI")
install.packages("RSQLite")
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "sakila_master.db")
query <- "
SELECT release_year, COUNT(*) AS movie_count
FROM film
WHERE release_year = (SELECT MIN(release_year) FROM film)
GROUP BY release_year;
"
result <- dbGetQuery(con, query)
print(result)
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "sakila_master.db")
query <- "
SELECT release_year, COUNT(*) AS movie_count
FROM film
WHERE release_year = (SELECT MIN(release_year) FROM film)
GROUP BY release_year;
"
result <- dbGetQuery(con, query)
print(result)
query_genre <- "
SELECT category.name AS genre, COUNT(film_category.film_id) AS movie_count
FROM category
JOIN film_category ON category.category_id = film_category.category_id
GROUP BY genre;
"
genre_data <- dbGetQuery(con, query_genre)
print(genre_data)
least_common_genre <- genre_data[which.min(genre_data$movie_count), ]
print(least_common_genre)
query_genre <- "
SELECT category.name AS genre, COUNT(film_category.film_id) AS movie_count
FROM category
JOIN film_category ON category.category_id = film_category.category_id
GROUP BY genre
ORDER BY movie_count limit 1;
"
genre_data <- dbGetQuery(con, query_genre)
print(genre_data)
query_country_customers <- "
SELECT country.country AS country_name, COUNT(customer.customer_id) AS customer_count
FROM country
JOIN city ON country.country_id = city.country_id
JOIN address ON city.city_id = address.city_id
JOIN customer ON address.address_id = customer.address_id
GROUP BY country_name;
"
country_customers_data <- dbGetQuery(con, query_country_customers)
print(country_customers_data)
query_country_customers <- "
SELECT country.country AS country_name, COUNT(customer.customer_id) AS customer_count
FROM country
JOIN city ON country.country_id = city.country_id
JOIN address ON city.city_id = address.city_id
JOIN customer ON address.address_id = customer.address_id
GROUP BY country_name
HAVING customer_count = 13;
"
country_customers_data <- dbGetQuery(con, query_country_customers)
print(country_customers_data)
# Find countries with exactly 13 customers
countries_with_13_customers <- country_customers_data[country_customers_data$customer_count == 13, ]
# Display the result
print(countries_with_13_customers)
countries_with_13_customers <- country_customers_data[country_customers_data$customer_count == 13, ]
print(countries_with_13_customers)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
us_500 <- read.csv("us-500.csv")
us_500 <- us_500 %>%
mutate(domain = sub(".*@", "", email),  # Extract domain from email
tld = sub(".*\\.", "", domain))
proportion_com <- us_500 %>%
summarise(proportion = mean(tld == "com"))
print(proportion_com)
non_alphanumeric_pattern <- "[^a-zA-Z0-9@.]"
# Create a new column that checks if there is at least one non-alphanumeric character (excluding @ and .)
us_500 <- us_500 %>%
mutate(has_non_alphanumeric = grepl(non_alphanumeric_pattern, email))
proportion_non_alphanumeric <- us_500 %>%
summarise(proportion = mean(has_non_alphanumeric))
# Print the result
print(proportion_non_alphanumeric)
us_500 <- us_500 %>%
mutate(area_code = substr(gsub("[^0-9]", "", phone1), 1, 3))
top_area_codes <- us_500 %>%
group_by(area_code) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
# Print the result
print(top_area_codes)
non_alphanumeric_pattern <- "[^a-zA-Z0-9@.]"
us_500 <- us_500 %>%
mutate(has_non_alphanumeric = grepl(non_alphanumeric_pattern, email))
proportion_non_alphanumeric <- us_500 %>%
summarise(proportion = mean(has_non_alphanumeric))
print(proportion_non_alphanumeric)
us_500 <- us_500 %>%
mutate(area_code = substr(gsub("[^0-9]", "", phone1), 1, 3))
top_area_codes <- us_500 %>%
group_by(area_code) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
print(top_area_codes)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
# Remove any rows where apartment_number could not be extracted (i.e., NA values)
data <- data %>%
filter(!is.na(apartment_number))
# Compute the log of apartment numbers
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
# Produce a histogram of the log of apartment numbers
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
# Remove any rows where apartment_number could not be extracted (i.e., NA values)
data <- data %>%
filter(!is.na(apartment_number))
# Compute the log of apartment numbers
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
# Produce a histogram of the log of apartment numbers
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
# Remove any rows where apartment_number could not be extracted (i.e., NA values)
data <- data %>%
filter(!is.na(apartment_number))
# Compute the log of apartment numbers
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 0.5) +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
# Remove any rows where apartment_number could not be extracted (i.e., NA values)
data <- data %>%
filter(!is.na(apartment_number))
# Compute the log of apartment numbers
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
# Remove any rows where apartment_number could not be extracted (i.e., NA values)
data <- data %>%
filter(!is.na(apartment_number))
# Compute the log of apartment numbers
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
data <- data %>%
filter(!is.na(apartment_number))
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
data <- data %>%
filter(!is.na(apartment_number))
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
us_500 <- read.csv("us-500.csv")
us_500 <- us_500 %>%
mutate(domain = sub(".*@", "", email),  # Extract domain from email
tld = sub(".*\\.", "", domain))
proportion_com <- us_500 %>%
summarise(proportion = mean(tld == "com"))
print(proportion_com)
non_alphanumeric_pattern <- "[^a-zA-Z0-9@.]"
data <- us_500 %>%
mutate(has_non_alphanumeric = grepl(non_alphanumeric_pattern, email))
proportion_non_alphanumeric <- data %>%
summarise(proportion = mean(has_non_alphanumeric))
print(proportion_non_alphanumeric)
data <- us_500 %>%
mutate(area_code = substr(gsub("[^0-9]", "", phone1), 1, 3))
top_area_codes <- us_500 %>%
group_by(area_code) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
data <- us_500 %>%
mutate(area_code = substr(gsub("[^0-9]", "", phone1), 1, 3))
top_area_codes <- data %>%
group_by(area_code) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
print(top_area_codes)
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
data <- data %>%
filter(!is.na(apartment_number))
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub("(\\d+)(?!.*\\d)", address)))
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address)))
data <- data %>%
filter(!is.na(apartment_number))
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
observed_freq <- data %>%
group_by(leading_digit) %>%
summarise(count = n()) %>%
mutate(observed_prob = count / sum(count))
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address))) %>%
filter(!is.na(apartment_number)) %>%
mutate(leading_digit = as.numeric(substr(apartment_number, 1, 1)))
observed_freq <- data %>%
group_by(leading_digit) %>%
summarise(count = n()) %>%
mutate(observed_prob = count / sum(count))
# Benford's Law expected probabilities for digits 1 through 9
benford_prob <- tibble(
leading_digit = 1:9,
expected_prob = log10(1 + 1 / leading_digit)
)
# Merge the observed and expected probabilities
comparison <- left_join(observed_freq, benford_prob, by = "leading_digit") %>%
mutate(expected_count = expected_prob * sum(count))
# Display the comparison table
print(comparison)
# Perform a chi-square goodness-of-fit test
chisq_test <- chisq.test(comparison$count, p = comparison$expected_prob)
# Display the result of the chi-square test
print(chisq_test)
ggplot(comparison, aes(x = factor(leading_digit))) +
geom_bar(aes(y = observed_prob), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = expected_prob), color = "red", size = 3) +
labs(title = "Observed vs. Expected Leading Digits (Benford's Law)",
x = "Leading Digit", y = "Proportion") +
theme_minimal()
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address))) %>%
filter(!is.na(apartment_number)) %>%
mutate(leading_digit = as.numeric(substr(apartment_number, 1, 1)))
observed_freq <- data %>%
group_by(leading_digit) %>%
summarise(count = n()) %>%
mutate(observed_prob = count / sum(count))
# Benford's Law expected probabilities for digits 1 through 9
benford_prob <- tibble(
leading_digit = 1:9,
expected_prob = log10(1 + 1 / leading_digit)
)
# Merge the observed and expected probabilities
comparison <- left_join(observed_freq, benford_prob, by = "leading_digit") %>%
mutate(expected_count = expected_prob * sum(count))
ggplot(comparison, aes(x = factor(leading_digit))) +
geom_bar(aes(y = observed_prob), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = expected_prob), color = "red", size = 3) +
labs(title = "Observed vs. Expected Leading Digits (Benford's Law)",
x = "Leading Digit", y = "Proportion") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address))) %>% na.omit()
data <- data %>%
filter(!is.na(apartment_number))
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
library(ggplot2)
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address))) %>% na.omit()
data <- data %>%
filter(!is.na(apartment_number))
data <- data %>%
mutate(log_apartment_number = log(apartment_number))
ggplot(data, aes(x = log_apartment_number)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Log of Apartment Numbers", x = "Log of Apartment Number", y = "Frequency") +
theme_minimal()
data <- us_500 %>%
mutate(apartment_number = as.numeric(sub(".*[^0-9]([0-9]+)$", "\\1", address))) %>%
filter(!is.na(apartment_number)) %>%
mutate(leading_digit = as.numeric(substr(apartment_number, 1, 1))) %>%
na.omit()
observed_freq <- data %>%
group_by(leading_digit) %>%
summarise(count = n()) %>%
mutate(observed_prob = count / sum(count))
# Benford's Law expected probabilities for digits 1 through 9
benford_prob <- tibble(
leading_digit = 1:9,
expected_prob = log10(1 + 1 / leading_digit)
)
# Merge the observed and expected probabilities
comparison <- left_join(observed_freq, benford_prob, by = "leading_digit") %>%
mutate(expected_count = expected_prob * sum(count))
ggplot(comparison, aes(x = factor(leading_digit))) +
geom_bar(aes(y = observed_prob), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = expected_prob), color = "red", size = 3) +
labs(title = "Observed vs. Expected Leading Digits (Benford's Law)",
x = "Leading Digit", y = "Proportion") +
theme_minimal()
