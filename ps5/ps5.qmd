---
title: "STATS 506 PS 5"
author: "Jingyan Zhang"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
editor: visual
---

link to my GitHub repo: https://github.com/Menako2013529/STATS-506-Problem-Set

```{r}
library(tidyverse)
library(Rcpp)
library(dplyr)
```

# Problem 1

## a.
I referred to ChatGPT for some help.
```{r}
# Define the rational class
setClass(
  "rational",
  slots = c(
    numerator = "numeric",
    denominator = "numeric"
  ),
  validity = function(object) {# 2. Validator
    if (object@denominator == 0) {
      return("Denominator cannot be zero.")
    }
    TRUE
  }
)
```
1.
```{r}
# Constructor
rational <- function(numerator, denominator) {
  if (denominator == 0) stop("Denominator cannot be zero.")
  new("rational", numerator = numerator, denominator = denominator)
}
```
Helper function:
```{r}
# Helper: GCD and LCM using Rcpp
Rcpp::cppFunction('
  int gcd(int a, int b) {
    if (b == 0) return abs(a);
    return gcd(b, a % b);
  }
')
```
3. 
```{r}
# Simplify method
setGeneric("simplify", function(object) standardGeneric("simplify"))
setMethod("simplify", "rational", function(object) {
  g <- gcd(object@numerator, object@denominator)
  object@numerator <- object@numerator / g
  object@denominator <- object@denominator / g
  object
})
```
4. 
```{r}
# Show method
setMethod("show", "rational", function(object) {
  cat(sprintf("%d/%d\n", object@numerator, object@denominator))
})
```
5. 
```{r}
# Quotient method
setGeneric("quotient", function(object, digits = 7) standardGeneric("quotient"))
setMethod("quotient", "rational", function(object, digits = 7) {
  if (!is.numeric(digits) || digits%%1!=0) stop("digits need to be an integer")
  result <- object@numerator / object@denominator
  print(round(result, digits))
  return(round(result, digits))
})
```
6. 
```{r}
# Arithmetic operations
setMethod("+", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  num <- e1@numerator * e2@denominator + e2@numerator * e1@denominator
  den <- e1@denominator * e2@denominator
  simplify(rational(num, den))
})

setMethod("-", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  num <- e1@numerator * e2@denominator - e2@numerator * e1@denominator
  den <- e1@denominator * e2@denominator
  simplify(rational(num, den))
})

setMethod("*", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  num <- e1@numerator * e2@numerator
  den <- e1@denominator * e2@denominator
  simplify(rational(num, den))
})

setMethod("/", signature(e1 = "rational", e2 = "rational"), function(e1, e2) {
  if (e2@numerator == 0) stop("Division by zero.")
  num <- e1@numerator * e2@denominator
  den <- e1@denominator * e2@numerator
  simplify(rational(num, den))
})
```

## b.
```{r}
r1 <- rational(24,6)
r2 <- rational(7,230)
r3 <- rational(0,4)
```


```{r, error=TRUE}
r1
r3
r1 + r2
r1 - r2
r1 * r2
r1 / r2
r1 + r3
r1 * r3
r2 / r3
quotient(r1)
quotient(r2)
quotient(r2, digits = 3)
quotient(r2, digits = 3.14)
quotient(r2, digits = "avocado")
q2 <- quotient(r2, digits = 3)
q2
quotient(r3)
simplify(r1)
simplify(r2)
simplify(r3)
```

## c.

```{r, error=TRUE}
test <- rational(1,0)
```

# Problem 2
```{r}
library(plotly)
```
## a.

```{r}
sales_data <- read_csv("df_for_ml_improved_new_market.csv")
```

```{r}
# Copy from last hw
genre_data <- sales_data %>%
  pivot_longer(
    cols = starts_with("Genre___"), 
    names_to = "genre", 
    values_to = "count"
  ) %>%
  filter(count == 1) %>%
  mutate(genre = str_replace_all(genre, "Genre___", "")) %>%
  group_by(year, genre) %>%
  summarize(total_sales = n(), .groups = 'drop')


plot <- genre_data %>%
  plot_ly(
    x = ~year,
    y = ~total_sales,
    color = ~genre,
    type = 'scatter',
    mode = 'lines+markers',
    fill = 'tonexty',
    text = ~paste("Genre:", genre, "<br>Total Sales:", total_sales, "<br>Year:", year)
  ) %>%
  layout(
    title = "Distribution of Genre Sales Across Years",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Total Sales"),
    legend = list(title = list(text = "Genre")),
    hovermode = "x unified"
  )
plot
```


## b.
I referred to ChatGPT.
```{r}
genre_price_data <- sales_data %>%
  pivot_longer(
    cols = starts_with("Genre___"), 
    names_to = "genre", 
    values_to = "count"
  ) %>%
  filter(count == 1) %>%
  mutate(genre = str_replace_all(genre, "Genre___", "")) %>%
  group_by(year, genre) %>%
  summarize(
    avg_price = mean(price_usd, na.rm = TRUE),
    .groups = 'drop'
  )

# Compute overall trend
overall_price_data <- sales_data %>%
  group_by(year) %>%
  summarize(
    avg_price = mean(price_usd, na.rm = TRUE),
    genre = "Overall",
    .groups = 'drop'
  )

# Combine overall and genre-specific data
combined_data <- bind_rows(genre_price_data, overall_price_data)

plot <- combined_data %>%
  plot_ly(
    x = ~year,
    y = ~avg_price,
    color = ~genre,
    type = 'scatter',
    mode = 'lines+markers',
    text = ~paste("Genre:", genre, "<br>Year:", year, "<br>Avg Price (USD):", round(avg_price, 2)),
    hoverinfo = "text"
  ) %>%
  layout(
    title = "Change in Sales Price Over Time (Overall and By Genre)",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Average Sales Price (USD)"),
    updatemenus = list(
      list(
        type = "dropdown",
        active = 0,
        buttons = list(
          list(label = "Overall",
               method = "update",
               args = list(list(visible = c(TRUE, rep(FALSE, n_distinct(combined_data$genre) - 1))),
                           list(title = "Change in Sales Price Over Time (Overall)"))),
          list(label = "By Genre",
               method = "update",
               args = list(list(visible = c(FALSE, rep(TRUE, n_distinct(combined_data$genre) - 1))),
                           list(title = "Change in Sales Price Over Time (By Genre)")))
        )
      )
    )
  )


plot

```


# Problem 3

```{r}
library(data.table)
library(nycflights13)
```

## a.
I referred to ChatGPT.
```{r}
flights_dt <- as.data.table(nycflights13::flights)
airports_dt <- as.data.table(nycflights13::airports)

# Compute departure delays per airport
departure_delays <- flights_dt[
  , .(mean_dep_delay = mean(dep_delay, na.rm = TRUE),
      median_dep_delay = median(dep_delay, na.rm = TRUE),
      flight_count = .N),
  by = .(origin)
][flight_count >= 10]  # Filter airports with at least 10 flights

# Join with airports data for airport names
departure_delays <- merge(
  departure_delays,
  airports_dt[, .(faa, name)],
  by.x = "origin",
  by.y = "faa",
  all.x = TRUE
)[order(-mean_dep_delay)]  # Order by descending mean delay

departure_delays <- departure_delays[, .(airport_name = name, mean_dep_delay, median_dep_delay)]

# Compute arrival delays per airport
arrival_delays <- flights_dt[
  , .(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
      median_arr_delay = median(arr_delay, na.rm = TRUE),
      flight_count = .N),
  by = .(dest)
][flight_count >= 10]  # Filter airports with at least 10 flights

# Join with airports data for airport names
arrival_delays <- merge(
  arrival_delays,
  airports_dt[, .(faa, name)],
  by.x = "dest",
  by.y = "faa",
  all.x = TRUE
)[order(-mean_arr_delay)]  # Order by descending mean delay
arrival_delays <- arrival_delays[, .(airport_name = name, mean_arr_delay, median_arr_delay)]
```
```{r}
# Print the tables
cat("Departure Delays per Airport:\n")
print(departure_delays)

cat("\nArrival Delays per Airport:\n")
print(arrival_delays)

```
## b.
I referred to ChatGPT.
```{r}
planes_dt <- as.data.table(nycflights13::planes)

# Compute the fastest aircraft model using data.table
fastest_aircraft <- merge(flights_dt, planes_dt, by = "tailnum", all.x = TRUE)[
  !is.na(air_time) & air_time > 0,  # Exclude missing or zero air_time
  .(time = air_time / 60, 
    mph = distance / (air_time / 60), 
    model)
][
  !is.na(model),  # Exclude rows with missing model
  .(avgmph = mean(mph, na.rm = TRUE), nflights = .N), 
  by = model
][order(-avgmph)][1]  # Order by descending avgmph and take the top row

# Print the result
print(fastest_aircraft)

```
